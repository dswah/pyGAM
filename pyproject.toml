[project]
name = "pygam"
version = "0.10.1"
description = "Generalized Additive Models in Python."
authors = [
    { name = "Daniel Servén Marín" },
    { name = "Charlie Brummitt" }
]
license = { text = "Apache-2.0" }
readme = "README.md"
requires-python = ">=3.9,<3.14"
classifiers = [
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: MacOS",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: Unix",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Software Development",
]

dependencies = [
    "numpy>=1.5.0",
    "progressbar2>=4.2.0,<5",
    "scipy>=1.11.1,<1.17",
]

[project.optional-dependencies]
dev = [
    "pandas>=1.6",
    "pytest>=7.2.2,<8",
    "flake8>=6.0.0,<7",
    "codecov>=2.1.12,<3",
    "pytest-cov>=4.0.0,<5",
    "mock>=5.0.1,<6",
    "nbsphinx>=0.9.0,<1",
    "sphinx-rtd-theme>=1.2.0,<2",
    "sphinxcontrib-napoleon>=0.7,<1",
    "ipython>=8.11.0,<9",
    "black>=23.1.0,<24",
]

[build-system]
requires = ["setuptools>=61", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["pygam*"]     # Only find 'pygam' packages, ignore 'imgs'

[tool.black]
line-length = 88
skip-string-normalization = true
target-version = ['py39']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
exclude = [".git"]
target-version = "py311"
extend-include = ["*.ipynb"]

[tool.ruff.lint]
select = [
  # https://pypi.org/project/pycodestyle
  "D",
  "E",
  "W",
  # https://pypi.org/project/pyflakes
  "F",
  # https://pypi.org/project/flake8-bandit
  "S",
  # https://docs.astral.sh/ruff/rules/#pyupgrade-up
  "UP",
  "I002",    # Missing required imports
  "UP008",   # Super calls with redundant arguments passed.
  "G010",    # Deprecated log warn.
  "PLR1722", # Use sys.exit() instead of exit() and quit().
  "PT014",   # pytest-duplicate-parametrize-test-cases.
  "PT006",   # Checks for the type of parameter names passed to pytest.mark.parametrize.
  "PT007",   # Checks for the type of parameter values passed to pytest.mark.parametrize.
  "PT018",   # Checks for assertions that combine multiple independent condition
  "RUF001", # Checks for non unicode string literals
  "RUF002", # Checks for non unicode string literals
  "RUF003", # Checks for non unicode string literals
]
extend-select = [
  "I", # isort
  "C4", # https://pypi.org/project/flake8-comprehensions
]
ignore=[
  "E203", # Whitespace-before-punctuation.
  "E402", # Module-import-not-at-top-of-file.
  "E731", # Do not assign a lambda expression, use a def.
  "RET504", # Unnecessary variable assignment before `return` statement.
  "S101", # Use of `assert` detected.
  "RUF100", # https://docs.astral.sh/ruff/rules/unused-noqa/
  "C408", # Unnecessary dict call - rewrite as a literal.
  "UP031", # Use format specifier instead of %
  "S102", # Use of excec
  "C414", # Unnecessary `list` call within `sorted()`
  "S301", # pickle and modules that wrap it can be unsafe
  "C416", # Unnecessary list comprehension - rewrite as a generator
  "S310", # Audit URL open for permitted schemes
  "S202", # Uses of `tarfile.extractall()`
  "S307", # Use of possibly insecure function
  "C417", # Unnecessary `map` usage (rewrite using a generator expression)
  "S605", # Starting a process with a shell, possible injection detected
  "E741", # Ambiguous variable name
  "S107", # Possible hardcoded password
  "S105", # Possible hardcoded password
  "PT018", # Checks for assertions that combine multiple independent condition
  "S602", # sub process call with shell=True unsafe
  "C419", # Unnecessary list comprehension, some are flagged yet are not
  "C409", # Unnecessary `list` literal passed to `tuple()` (rewrite as a `tuple` literal)
  "S113", # Probable use of httpx call without timeout
  "D100", # Missing docstring in public module
  "D101", # Missing docstring in public class
  "D102", # Missing docstring in public method
  "D103", # Missing docstring in public function
  "D104", # Missing docstring in public package
  "D105", # Missing docstring in magic method
  "D107", # Missing docstring in __init__
  "D200", # One-line docstring should fit on one line
  "D205", # 1 blank line required between summary line and description
  "D400", # First line should end with a period
  "D401", # First line should be in imperative mood
  "D403", # First word of the first line should be properly capitalized
  "D414", # Section has no content
  "D415", # First line should end with a period, question mark, or exclamation point
  "E501", # Line too long
  "F821", # Undefined name (for the notebook issues)
  "UP008", # Use `super()` instead of `super(__class__, self)`
  "UP028", # Replace `yield` over `for` loop with `yield from`
  "UP036", # Version block is outdated for minimum Python version
  "UP038", # Use `X | Y` in `isinstance` call instead of `(X, Y)`
  "C404", # Unnecessary list comprehension (rewrite as a dict comprehension)
  "RUF002", # Docstring contains ambiguous characters
]
allowed-confusables=["σ"]

[tool.ruff.lint.per-file-ignores]

"setup.py" = ["S101"]
"**/__init__.py" = [
  "F401", # unused import
]
"**/tests/**" = [
  "D",
  "S605",  # Starting a process with a shell: seems safe, but may be changed in the future; consider rewriting without `shell`
  "S607",  # Starting a process with a partial executable path
  "RET504",  # todo:Unnecessary variable assignment before `return` statement
  "PT004",  # Fixture `tmpdir_unittest_fixture` does not return anything, add leading underscore
  "PT011",  # `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception
  "PT012",  # `pytest.raises()` block should contain a single simple statement
  "PT019",  # Fixture `_` without value is injected as parameter, use `@pytest.mark.usefixtures` instead
  "PT006" # Checks for the type of parameter names passed to pytest.mark.parametrize.
]
"doc/source/notebooks/*.ipynb" = ["F821"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"
